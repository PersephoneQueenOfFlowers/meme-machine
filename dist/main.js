/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("window.onload = function () {\r\n\r\n  let container = document.getElementById(\"canvas-container\"),\r\n      canvas = document.getElementById(\"mycanvas\"),\r\n      ctx = canvas.getContext('2d'),\r\n      imageLoader = document.getElementById('imageLoader'),\r\n      scale = document.getElementById('scale'),\r\n      rotate = document.getElementById('rotate'),\r\n      customText = document.getElementById('custom-text'),\r\n      download = document.getElementById(\"download\"),\r\n      preview = document.getElementById(\"preview\"),\r\n      control = document.querySelectorAll('.control'),\r\n      scaleVal,\r\n      rotateVal,\r\n      x,\r\n      y,\r\n      hRatio,\r\n      vRatio,\r\n      ratio,\r\n      text = customText.value,\r\n      dt,\r\n      previewCounter = 0;\r\n\r\n  //hide all controls but first \r\n  for (let i = 0; i < control.length; i++) {\r\n    control[i].classList.add('hidden');\r\n  }\r\n  // get other controls by ID to show when that step is happening.\r\n  const uploads = document.querySelector(\"#upload-container\");\r\n  const scaleZoom = document.querySelector(\"#scale-zoom-container\");\r\n  const textAdd = document.querySelector(\"#text-container\");\r\n  const downloads = document.querySelector(\"#dl-container\");\r\n  uploads.classList.toggle(\"hidden\");\r\n\r\n\r\n  /***************(set context text characteristics)************/\r\n  ctx.lineWidth = 5;\r\n  ctx.font = '32pt Fira Sans';\r\n  ctx.strokeStyle = 'black';\r\n  ctx.fillStyle = 'white';\r\n  // ctx.textAlign = 'center';\r\n  ctx.lineJoin = 'round';\r\n  // img = document.getElementById('start-image'),\r\n  //   /*************(step 1, load the image from file) ********/\r\n  imageLoader.addEventListener('change', loadImage, false);\r\n\r\n  /************* (step 2, scale and rotate) ********************/\r\n\r\n  scale.addEventListener('change', doTransform, false);\r\n  rotate.addEventListener('change', doTransform, false);\r\n  /************* (and swap out buttons when done) **************/\r\n  const doneScaleZoom = document.querySelector(\"#done-scale-zoom\");\r\n  doneScaleZoom.addEventListener('click', function(){\r\n    textAdd.classList.toggle(\"hidden\");\r\n    scaleZoom.classList.toggle(\"hidden\");\r\n  });\r\n\r\n  /************* ( step 3, add text ) **************************/\r\n  customText.addEventListener('keyup', redrawText, true);\r\n  preview.addEventListener('click', previewCanvas, false);\r\n  download.addEventListener('click', downloadImg, false);\r\n  const doneText = document.querySelector(\"#done-text\");\r\n  doneText.addEventListener('click', function () {\r\n    textAdd.classList.toggle(\"hidden\");\r\n    downloads.classList.toggle(\"hidden\");\r\n  });\r\n\r\n  /************** ( capture scale and rotate values  ) **********/\r\n  function getScaleVal() {\r\n    scaleVal = document.getElementById('scale').value;\r\n    return scaleVal;\r\n  }\r\n\r\n  function getRotateVal() {\r\n    rotateVal = document.getElementById('rotate').value;\r\n    return rotateVal;\r\n  }\r\n\r\n  let img = new Image();\r\n  img.crossOrigin = \"Anonymous\";\r\n  // img.src = '../dist/images/camera.png';\r\n  \r\n  img.onload = function () {\r\n\r\n    const w = img.naturalWidth;\r\n    const h = img.naturalHeight;\r\n\r\n    const scale = Math.max(canvas.width / w, canvas.height / h);\r\n\r\n    let x = (canvas.width / 2) - (w / 2) * scale;\r\n    let y = (canvas.height / 2) - (h / 2) * scale;\r\n    // Draw it\r\n    ctx.drawImage(img, x, y, w * scale, h * scale );\r\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n  }\r\n  \r\n  function loadImage(e) {\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    let reader = new FileReader();\r\n    reader.onload = function (event) {\r\n      img.src = event.target.result;\r\n      img.setAttribute(\"crossOrigin\", \"anonymous\");\r\n      source = event.target.result;\r\n    }\r\n    reader.readAsDataURL(e.target.files[0]);\r\n    uploads.classList.toggle(\"hidden\");\r\n    scaleZoom.classList.toggle(\"hidden\");\r\n    return false;\r\n  }\r\n\r\n  function doTransform() {\r\n    ctx.save();\r\n    // Clear canvas\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Translate to center so transformations will apply around this point\r\n    ctx.translate(canvas.width / 2, canvas.height / 2);\r\n\r\n    // Perform scale\r\n    scaleVal = getScaleVal();\r\n    ctx.scale(scaleVal, scaleVal);\r\n\r\n    // Perform rotation\r\n    rotateVal = getRotateVal();\r\n    ctx.rotate(rotateVal * Math.PI / 180);\r\n\r\n    // Reverse the earlier translation\r\n    ctx.translate(-canvas.width / 2, -canvas.height / 2);\r\n\r\n    const w = img.naturalWidth;\r\n    const h = img.naturalHeight;\r\n\r\n    const scale = Math.max(canvas.width / w, canvas.height / h);\r\n\r\n    let x = (canvas.width / 2) - (w / 2);\r\n    let y = (canvas.height / 2) - (h / 2);\r\n    // Draw it\r\n\r\n    ctx.drawImage(img, x, y, img.width, img.height);\r\n    ctx.restore();\r\n\r\n  }\r\n\r\n  /************** ( for redrawing canvas on each keystroke  ) ***************/\r\n  // called by keyup in the text input field \r\n  function redrawText() {\r\n\r\n    doTransform();\r\n\r\n    function wrapText(context, text, x, y, maxWidth, lineHeight) {\r\n      let words = text.split(' ');\r\n      let line = '';\r\n\r\n      context.lineWidth = 5;\r\n      context.font = '44px Myriad Pro';\r\n      context.strokeStyle = 'black';\r\n      context.fillStyle = 'white';\r\n      context.textAlign = 'center';\r\n      context.textBaseline = 'middle';\r\n      context.lineJoin = 'round';\r\n\r\n      for (let n = 0; n < words.length; n++) {\r\n        let testLine = line + words[n] + ' ';\r\n        let metrics = context.measureText(testLine);\r\n        let testWidth = metrics.width;\r\n        if (testWidth > maxWidth && n > 0) {\r\n          context.strokeText(line.slice(0, -1), x, y);\r\n          context.fillText(line.slice(0, -1), x, y);\r\n          line = words[n];\r\n          y += lineHeight;\r\n        }\r\n        else {\r\n          line = testLine;\r\n        }\r\n      }\r\n      context.strokeText(line.slice(0, -1), x, y);\r\n      context.fillText(line.slice(0, -1), x, y);\r\n    }\r\n\r\n    let text = document.getElementById('custom-text').value;\r\n\r\n    // Set the text style\r\n    text = text.toUpperCase();\r\n    x = canvas.width / 2;\r\n    y = 100;\r\n    wrapText(ctx, text, x, y, 500, 40);\r\n\r\n  }\r\n\r\n  function previewCanvas() {\r\n    try {\r\n      dt = canvas.toDataURL('image/png');\r\n    }\r\n    catch (err) {\r\n      console.log(\"Error: \" + err);\r\n    }\r\n\r\n    //now here try to save image in dir \r\n    dt.replace(/^data:image\\/[^;]*/, 'data:application/octet-stream');\r\n    // /* Change MIME type to trick the browser to downlaod the file instead of displaying it */\r\n    dt = dt.replace(/^data:application\\/octet-stream/, 'data:application/octet-stream;headers=Content-Disposition%3A%20attachment%3B%20filename=Canvas.png');\r\n  }\r\n\r\n  function downloadImg() {\r\n    previewCanvas();\r\n    this.href = dt;\r\n    dt = \"\";\r\n    location.reload();\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://meme-machine/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;